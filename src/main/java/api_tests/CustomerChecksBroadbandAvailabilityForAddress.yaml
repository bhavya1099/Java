# ********RoostGPT********

# Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 
# 
# ROOST_METHOD_HASH=dc03be64e0
# ROOST_METHOD_SIG_HASH=3c477b173d
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: Check broadband service availability and selection',
#   background: 'Background: \n' +
#     '    Given a customer base where each customer has a unique subscriber ID',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Customer checks broadband availability for an address',
#     steps: 'Given "John Doe" has a subscriber ID "SVTL001"\n' +
#       'And he wants to check broadband availability for address "14393"\n' +
#       'When John sends a request to check availability\n' +
#       'Then the system should validate the address\n' +
#       'And fetch the broadband availability\n' +
#       'And return a list of available broadband packages',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "CustomerChecksBroadbandAvailabilityForAddress.csv"
    fields:
      - "subscriberID"
      - "addressID"
    skipHeader: true
    delimiter: "^|^"
  environments:
    prod:
      target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}

scenarios:
  - name: "Customer checks broadband availability for an address"
    flow:
      - post:
          url: "/{cluster_id}/topics"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          json:
            topic_name: "broadband-availability"
            partitions_count: 1
            replication_factor: 3
            configs: []
          expect:
            - statusCode: 201
          log: "John sends a request to check availability and expects to create a topic successfully."

      - think: 1

      - get:
          url: "/{cluster_id}/topics/broadband-availability"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
          log: "The system should validate the address and fetch the broadband availability."

      - think: 1

      - get:
          url: "/{cluster_id}/topics/{topic_name}/partitions"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
          log: "Return a list of available broadband packages."

  - name: "Bad request upon incorrect topic_name structure in checking availability."
    flow:
      - post:
          url: "/{cluster_id}/topics"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          json:
            topic_name: 12345  # intentionally incorrect type for topic_name (should be a string)
          expect:
            - statusCode: 400
          log: "Sending a bad request with numeric topic_name to test system validation."

      - think: 1
