# ********RoostGPT********

# Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 
# 
# ROOST_METHOD_HASH=9adbc3cb1f
# ROOST_METHOD_SIG_HASH=b70f07ae36
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: Check broadband service availability and selection',
#   background: 'Background: \n' +
#     '    Given a customer base where each customer has a unique subscriber ID',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Selecting a broadband package based on availability',
#     steps: 'Given "John Doe" received the broadband availability report\n' +
#       'And he finds that "BL_1000MB" broadband speed is available at his address\n' +
#       'When John selects the "BL_1000MB" package\n' +
#       'Then the system should validate the selection\n' +
#       "And confirm the broadband package for John's address",
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}/kafka/v3/clusters"
  environments:
    staging:
     target: "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "SelectingBroadbandPackageBasedOnAvailability.csv"
    fields:
      - "cluster_id"
      - "topic_name"
    skipHeader: true  
  defaults:
    headers:
      Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
  plugins:
    expect: {}

scenarios:
  - name: "Selecting a broadband package based on availability"
    flow:
      - post:
          url: "/{{ cluster_id }}/topics/{{ topic_name }}/records"
          json:
            partition_id: 1
            headers: 
              - name: "Content-Type"
                value: "application/json"
            key:
              type: "STRING"
              data: "user-key-12345"
            value:
              type: "STRING"
              data: "{{ availabilityReport }}"
            timestamp: "2021-02-05T19:14:42Z"
          expect:
            - statusCode: 200
            - jsonpath: '$.error_code'
              value: 200
        log: "John Doe posting availability report should be successful with 200 status and error code 200."
      - think: 1
      - post:
          url: "/{{ cluster_id }}/topics/{{ topic_name }}/records"
          json:
            partition_id: 1
            headers: 
              - name: "Content-Type"
                value: "application/json"
            key:
              type: "STRING"
              data: "user-key-12345"
            value:
              type: "STRING"
              data: "{{ wrongAvailabilityReport }}"
            timestamp: "2021-02-05T19:14:42Z"
          expect:
            - statusCode: 200
            - jsonpath: '$.error_code'
              value: 400
        log: "John posting an invalid availability report should still receive a 200 status but with error code 400 indicating failure."
