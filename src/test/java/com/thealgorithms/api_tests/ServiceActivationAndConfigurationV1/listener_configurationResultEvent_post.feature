# ********RoostGPT********

# Test generated by RoostGPT for test integration-scenarioTab-test using AI Type  and AI Model 
# 
# Feature file generated for /listener/configurationResultEvent_post for http method type POST 
# RoostTestHash=51f5770c5e
# 
# 

# ********RoostGPT********
Feature: Configuration Result Event Notification API

  Background:
    * def urlBase = karate.properties['iout_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['iout_AUTH_TOKEN']) }

  Scenario Outline: Verify Configuration Result Event Notification for different states and types
    Given path '/listener/configurationResultEvent'
    And request
      """
      <requestBody>
      """
    When method POST
    Then status <expectedStatus>
    And match responseHeaders['Content-Type'][0] == 'application/json'
    And match response ==
      """
      <expectedResponse>
      """

    Examples:
      | requestBody                                                                                                                                                                                                                                                                                                                                                              | expectedStatus | expectedResponse                                                                              |
      | { "notification": { "customer": { "subscriberId": "SVTAL001" }, "date": "2021-11-25T18:31:06.857-03:00", "configuration": { "id": "1a1befab-e705-41af-828b-d171573c9718", "type": "HGW_WIFI_CONFIGURATION", "startDate": "2021-11-25T19:31:06-02", "endDate": "2021-11-25T19:31:06-02", "state": "INTERNAL_FAULT", "diagnostic": { "code": "NOK", "messages": "" } } } } |            503 | { "error": "Internal Server Error", "message": "Configuration failed due to internal fault" } |
      | { "notification": { "customer": { "subscriberId": "SVTAL001" }, "date": "2021-11-25T16:50:41.806-03:00", "configuration": { "id": "96070797-c019-45e1-ac42-48a4a76022bb", "type": "HGW_WIFI_CONFIGURATION", "startDate": "2021-11-25T17:50:39-02", "endDate": "2021-11-25T17:50:41-02", "state": "FINISHED", "diagnostic": { "code": "OK", "messages": "" } } } }        |            204 | {}                                                                                            |
      | { "notification": { "customer": { "subscriberId": "SVTAL001" }, "date": "2021-11-25T16:53:31.305-03:00", "configuration": { "id": "6cf7f615-54b0-4a92-af8d-aea38ee549c1", "type": "HGW_WIFI_CONFIGURATION", "startDate": "2021-11-25T17:53:29-02", "endDate": "2021-11-25T17:53:30-02", "state": "REJECTED", "diagnostic": { "code": "", "messages": "" } } } }          |            400 | { "error": "Bad Request", "message": "Configuration rejected due to invalid parameters" }     |
