// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=knapSack_435b1b9e40
ROOST_METHOD_SIG_HASH=knapSack_7b6611eddd
"""
Scenario 1: Test Scenario with Valid Non-zero Values
Details:
  TestName: testKnapSackWithValidNonZeroValues
  Description: This test scenario is to check if the KnapSack function works correctly by giving it valid non-zero weightCapacity, weights and values. This is to ensure that the method correctly implements the knapsack problem solution.
Execution:
  Arrange: Set up weightCapacity as a non-zero positive integer and weights and values arrays as non-empty arrays of non-zero positive integers.
  Act: Invoke the knapSack method with the weightCapacity, weights and values.
  Assert: Use JUnit assertEquals method to compare the result against an expected outcome.
Validation:
  The validation aims to check if the returned maximum value that can be put in a knapsack of capacity weightCapacity is correct.

Scenario 2: Test Scenario with weight Capacity Less Than Minimum Weight
Details:
  TestName: testKnapSackWithWeightCapacityLessThanMinWeight
  Description: This test scenario covers edge case where weightCapacity is less than the minimum weight in weights array. We expect the method to return 0 as no item can be included in the knapsack.
Execution:
  Arrange: Set up weightCapacity as a positive integer less than the minimum weight in weights array.
  Act: Invoke the knapSack method with the weightCapacity, weights and values.
  Assert: Use assertEquals method to assert that the return value is 0.
Validation:
  The validation aims to verify if the knapSack method is correctly determining that no item can be included in the knapsack when weightCapacity is less than the minimum weight.

Scenario 3: Test Scenario When Weights and Values Arrays Have Different Lengths
Details:
  TestName: testKnapSackWithUnequalLengthsOfWeightsAndValues
  Description: This test scenario checks for error handling when weights and values arrays have different lengths. The method is expected to throw IllegalArgumentException.
Execution:
  Arrange: Set up weights and values arrays with different lengths.
  Act: Invoke the knapSack method with the weightCapacity, weights, and values.
  Assert: Use JUnit exception handling to verify that an IllegalArgumentException is thrown.
Validation:
  The assertion verifies that an IllegalArgumentException is thrown when weights and values arrays have different lengths. This test is significant to verify error handling for invalid inputs.

Scenario 4: Test Scenario with Zero Weight Capacity
Details:
  TestName: testKnapSackWithZeroWeightCapacity
  Description: This scenario is to check whether the method returns 0 when given a weight capacity of 0. This is to check that the algorithm correctly handles edge cases.
Execution:
  Arrange: Set up weightCapacity as 0 and weights and values arrays as non-empty arrays of non-zero positive integers.
  Act: Invoke the knapSack method with the weightCapacity, weights and values.
  Assert: Use JUnit assertEquals method to compare the result against an expected outcome (0).
Validation:
  The validation aims to verify is the return maximum value that can be put in a knapsack of 0 capacity is 0.
  """
*/
// ********RoostGPT********
package com.thealgorithms.dynamicprogramming;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.util.Arrays;
import org.junit.experimental.categories.Category;
import org.junit.Test;

@Category({ Categories.knapSack.class })
public class KnapsackKnapSack551Test {

	@Test
	public void testKnapSackWithValidNonZeroValues() {
		// Arrange
		int weightCapacity = 50;
		int[] weights = { 10, 20, 30 };
		int[] values = { 60, 100, 120 };
		int expectedMaxValue = 220;
		// Act
		int maxValue = Knapsack.knapSack(weightCapacity, weights, values);
		// Assert
		Assertions.assertEquals(expectedMaxValue, maxValue);
	}

	@Test
	public void testKnapSackWithWeightCapacityLessThanMinWeight() {
		// Arrange
		int weightCapacity = 5;
		int[] weights = { 10, 20, 30 };
		int[] values = { 60, 100, 120 };
		// Act
		int maxValue = Knapsack.knapSack(weightCapacity, weights, values);
		// Assert
		Assertions.assertEquals(0, maxValue);
	}

	@Test
	public void testKnapSackWithUnequalLengthsOfWeightsAndValues() {
		// Arrange
		int weightCapacity = 50;
		int[] weights = { 10, 20 };
		int[] values = { 60, 100, 120 };
		// Assert
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			// Act
			Knapsack.knapSack(weightCapacity, weights, values);
		});
	}

	@Test
	public void testKnapSackWithZeroWeightCapacity() {
		// Arrange
		int weightCapacity = 0;
		int[] weights = { 10, 20, 30 };
		int[] values = { 60, 100, 120 };
		// Act
		int maxValue = Knapsack.knapSack(weightCapacity, weights, values);
		// Assert
		Assertions.assertEquals(0, maxValue);
	}

}