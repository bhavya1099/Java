// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=knapSack_8df1ca4ea8
ROOST_METHOD_SIG_HASH=knapSack_670bc7a120
"""
Scenario 1: Test with null weight and value arrays
Details:
  TestName: testWithNullArrays
  Description: This test is meant to verify that supplying null for weights and values arrays to the knapSack method throws an IllegalArgumentException.
Execution:
  Arrange: Set weights and values arrays to null.
  Act: Invoke knapSack method with weightCapacity 10 and the null arrays.
  Assert: An IllegalArgumentException should be thrown.
Validation:
  This test verifies that the knapSack method correctly handles null input arrays, which should not be allowed as it makes no sense to try to solve a knapsack problem without items (weights and values). The expected result is a thrown IllegalArgumentException.
Scenario 2: Test with empty weights and values arrays
Details:
  TestName: testWithEmptyArrays
  Description: This test is meant to verify that supplying empty arrays for weights and values to the knapSack method returns a maximum value of 0.
Execution:
  Arrange: Set weights and values arrays to empty arrays.
  Act: Invoke knapSack method with weightCapacity 10 and the empty arrays.
  Assert: The returned maximum value should be 0.
Validation:
  This test verifies that the knapSack method correctly handles empty input arrays, which should result in a maximum value of 0 as there are no items to include in the knapsack.
Scenario 3: Test with valid weights and values arrays and weight capacity
Details:
  TestName: testWithValidArraysAndWeightCapacity
  Description: This test is meant to check that supplying valid weights and values arrays and weight capacity to the knapSack method returns the correct maximum value.
Execution:
  Arrange: Set weights and values arrays to {10, 20, 30} and {60, 100, 120} respectively, and weightCapacity to 50.
  Act: Invoke knapSack method with the prepared values.
  Assert: The returned maximum value should be 220.
Validation:
  This test verifies that the knapSack method correctly calculates the maximum value obtainable from the given items (weights and values) without exceeding the weight capacity. The expected result, 220, is obtained by including the first and second items in the knapsack.
Scenario 4: Test with inconsistent lengths of weights and values arrays
Details:
  TestName: testWithInconsistentLengthsOfArrays
  Description: This test is meant to verify that supplying weights and values arrays with different lengths to the knapSack method throws an IllegalArgumentException.
Execution:
  Arrange: Set weights array to {10, 20} and values array to {60}.
  Act: Invoke knapSack method with the inconsistent arrays and weightCapacity 50.
  Assert: An IllegalArgumentException should be thrown.
Validation:
  This test verifies that the knapSack method correctly handles inconsistent lengths of input arrays. Each weight should correspond to a value, thus the arrays should have the same length. The expected result is a thrown IllegalArgumentException.
"""
*/
// ********RoostGPT********
package com.thealgorithms.dynamicprogramming;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.Arrays;
import org.junit.experimental.categories.Category;
import org.junit.Test;

@Category({ Categories.knapSack.class, Categories.throwIfInvalidInput.class })
public class KnapsackKnapSackTest {

	@Test
	public void testWithNullArrays() {
		int[] weights = null;
		int[] values = null;
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			Knapsack.knapSack(10, weights, values);
		});
		String expectedMessage = "Input arrays must not be null and must have the same length.";
		String actualMessage = exception.getMessage();
		assertEquals(expectedMessage, actualMessage);
	}

	@Test
	public void testWithEmptyArrays() {
		int[] weights = new int[] {};
		int[] values = new int[] {};
		int maxValue = Knapsack.knapSack(10, weights, values);
		assertEquals(0, maxValue);
	}

	@Test
	public void testWithValidArraysAndWeightCapacity() {
		int[] weights = new int[] { 10, 20, 30 };
		int[] values = new int[] { 60, 100, 120 };
		int maxValue = Knapsack.knapSack(50, weights, values);
		assertEquals(220, maxValue);
	}

	@Test
	public void testWithInconsistentLengthsOfArrays() {
		int[] weights = new int[] { 10, 20 };
		int[] values = new int[] { 60 };
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			Knapsack.knapSack(50, weights, values);
		});
		String expectedMessage = "Input arrays must not be null and must have the same length.";
		String actualMessage = exception.getMessage();
		assertEquals(expectedMessage, actualMessage);
	}

}