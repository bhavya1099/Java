// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=throwIfInvalidInput_2975b0cbde
ROOST_METHOD_SIG_HASH=throwIfInvalidInput_5223762e66
"""
Scenario 1: Validate method reaction to a valid input
Details:
  TestName: testWithValidInput
  Description: This test is meant to check the behavior of the method when valid weight capacity, weights, and values arrays are provided.
Execution:
  Arrange: Test doubles: a positive weight capacity, two arrays of equal length containing positive integers.
  Act: Invoke the method throwIfInvalidInput with the above parameters.
  Assert: Verify that no exceptions are thrown using JUnit's assertDoesNotThrow method.
Validation:
  The assertion aims to confirm that for valid input, the method does what it is expected to: do nothing (not throw any exceptions). This is crucial as this is the method's fundamental purpose.
Scenario 2: Validate method reaction to weight capacity being negative
Details:
  TestName: testWithNegativeWeightCapacity
  Description: This test is meant to check if the IllegalArgumentException is thrown when the weight capacity provided is negative.
Execution:
  Arrange: Test doubles: Negative weight capacity and two arrays of equal length with positive integers.
  Act: Invoke the method throwIfInvalidInput with the above parameters.
  Assert: Verify that an IllegalArgumentException is thrown with an error message indicating that weight capacity should not be negative.
Validation:
  The assertion checks that the method rejects invalid input and clarifies the error accurately. This protects the assumption that only positive weight capacities are acceptable.
Scenario 3: Validate Exception when null arrays are provided
Details:
  TestName: testWithNullArrays
  Description: The test is meant to check if the IllegalArgumentException is thrown when any input array is null.
Execution:
  Arrange: Test doubles: weight capacity and null weight arrays.
  Act: Invoke the method throwIfInvalidInput with the above parameters.
  Assert: Verify that an IllegalArgumentException is thrown with an error message stating that input arrays must not be null.
Validation:
  The assertion confirms that the method correctly detects and rejects null values. Ensuring Non-nullity is essential, as it avoids potential NullPointerExceptioN.
Scenario 4: Validate Exception when arrays with different sizes are provided
Details:
  TestName: testWithDifferentSizeArrays
  Description: This test is designed to verify if an IllegalArgumentException is thrown when weights and value arrays of different lengths are given.
Execution:
  Arrange: Test doubles: weight capacity, and two arrays with different lengths.
  Act: Invoke the method throwIfInvalidInput with these parameters.
  Assert: Confirm that an IllegalArgumentException is thrown, and the error message states that the arrays must have the same length.
Validation:
  The assertion verifies that the method throws an exception if the arrays are of different lengths. Consistent size ensures items in weights directly correspond to items in values.
Scenario 5: Validate Exception when the weights array includes non-positive integers
Details:
  TestName: testWithNonPositiveWeightInArray
  Description: This test is intended to check if an IllegalArgumentException is thrown when the weights array includes zero or negative integers.
Execution:
  Arrange: Test doubles: weight capacity and two arrays with the same size, but weights array includes zero.
  Act: Invoke the method throwIfInvalidInput with these parameters.
  Assert: Verify an IllegalArgumentException is thrown, and the error message states that the array has non-positive weight(s).
Validation:
  The assertion confirms the method's ability to ensure no zero or negative weights are included. As weights should always be positive, this validation crucially matches the business rules.
"""
*/
// ********RoostGPT********
package com.thealgorithms.dynamicprogramming;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.Arrays;
import org.junit.experimental.categories.Category;
import org.junit.Test;

@Category({ Categories.throwIfInvalidInput.class })
public class KnapsackThrowIfInvalidInputTest {

	@Test
	public void testWithValidInput() {
		int weightCapacity = 50;
		int[] weights = { 10, 20, 30 };
		int[] values = { 60, 100, 120 };

		assertDoesNotThrow(() -> Knapsack.throwIfInvalidInput(weightCapacity, weights, values));
	}

	@Test
	public void testWithNegativeWeightCapacity() {
		int weightCapacity = -50;
		int[] weights = { 10, 20, 30 };
		int[] values = { 60, 100, 120 };

		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			Knapsack.throwIfInvalidInput(weightCapacity, weights, values);
		});

		String expectedMessage = "Weight capacity should not be negative.";
		String actualMessage = exception.getMessage();
		assertEquals(expectedMessage, actualMessage);
	}

	@Test
	public void testWithNullArrays() {
		int weightCapacity = 50;
		int[] weights = null;
		int[] values = null;

		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			Knapsack.throwIfInvalidInput(weightCapacity, weights, values);
		});

		String expectedMessage = "Input arrays must not be null and must have the same length.";
		String actualMessage = exception.getMessage();
		assertEquals(expectedMessage, actualMessage);
	}

	@Test
	public void testWithDifferentSizeArrays() {
		int weightCapacity = 50;
		int[] weights = { 10, 20, 30 };
		int[] values = { 60, 100 };

		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			Knapsack.throwIfInvalidInput(weightCapacity, weights, values);
		});

		String expectedMessage = "Input arrays must not be null and must have the same length.";
		String actualMessage = exception.getMessage();
		assertEquals(expectedMessage, actualMessage);
	}

	@Test
	public void testWithNonPositiveWeightInArray() {

		int weightCapacity = 50;
		int[] weights = { 10, 0, 30 };
		int[] values = { 60, 100, 120 };

		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			Knapsack.throwIfInvalidInput(weightCapacity, weights, values);
		});

		String expectedMessage = "Input array should not contain non-positive weight(s).";
		String actualMessage = exception.getMessage();
		assertEquals(expectedMessage, actualMessage);
	}

}