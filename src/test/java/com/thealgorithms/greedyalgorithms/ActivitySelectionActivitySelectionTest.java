// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=activitySelection_77631a6e2d
ROOST_METHOD_SIG_HASH=activitySelection_bf79d28a9f
"""
Scenario 1: Test with valid start times and end times
Details:
  TestName: testActivitySelectionWithValidTimes
  Description: This test will verify the functionality of the activity selection algorithm with valid start times and end times.
Execution:
  Arrange: Create arrays of start times and end times with valid values.
  Act: Call the activitySelection method with the start times and end times arrays.
  Assert: Verify that the returned list of selected activities is as expected.
Validation:
  This test is important to ensure that the activity selection algorithm is functioning as expected. The expected result is that the algorithm will select the maximum number of activities that do not overlap in time.
Scenario 2: Test with overlapping activities
Details:
  TestName: testActivitySelectionWithOverlappingActivities
  Description: This test will verify the functionality of the activity selection algorithm when there are overlapping activities.
Execution:
  Arrange: Create arrays of start times and end times where some activities overlap.
  Act: Call the activitySelection method with the start times and end times arrays.
  Assert: Verify that the returned list of selected activities is as expected.
Validation:
  This test is important to ensure that the activity selection algorithm correctly handles overlapping activities. The expected result is that the algorithm will select the maximum number of activities that do not overlap in time.
Scenario 3: Test with empty arrays
Details:
  TestName: testActivitySelectionWithEmptyArrays
  Description: This test will verify the functionality of the activity selection algorithm when the start times and end times arrays are empty.
Execution:
  Arrange: Create empty arrays of start times and end times.
  Act: Call the activitySelection method with the empty arrays.
  Assert: Verify that the returned list of selected activities is empty.
Validation:
  This test is important to ensure that the activity selection algorithm correctly handles empty input arrays. The expected result is that the algorithm will return an empty list of selected activities.
Scenario 4: Test with null arrays
Details:
  TestName: testActivitySelectionWithNullArrays
  Description: This test will verify the functionality of the activity selection algorithm when the start times and end times arrays are null.
Execution:
  Arrange: Set the arrays of start times and end times to null.
  Act: Call the activitySelection method with the null arrays.
  Assert: Verify that a NullPointerException is thrown.
Validation:
  This test is important to ensure that the activity selection algorithm correctly handles null input arrays. The expected result is that a NullPointerException will be thrown.

Scenario 5: Test with arrays of different lengths
Details:
  TestName: testActivitySelectionWithDifferentLengthArrays
  Description: This test will verify the functionality of the activity selection algorithm when the start times and end times arrays have different lengths.
Execution:
  Arrange: Create arrays of start times and end times with different lengths.
  Act: Call the activitySelection method with the arrays of different lengths.
  Assert: Verify that an IllegalArgumentException is thrown.
Validation:
  This test is important to ensure that the activity selection algorithm correctly handles input arrays of different lengths. The expected result is that an IllegalArgumentException will be thrown.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.sorts")
@Tag("com.thealgorithms.sorts.sort")
@Tag("com.thealgorithms.misc")
@Tag("com.thealgorithms.misc.add")
@Tag("com.thealgorithms.misc.add")
@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.activitySelection")
@Tag("roostTestTag1")
@Tag("roostTestTag2")
public class ActivitySelectionTest {

	@Test
	@Tag("valid")
	public void testActivitySelectionWithValidTimes() {
		int[] startTimes = new int[] { 1, 3, 0, 5, 8, 5 };
		int[] endTimes = new int[] { 2, 4, 6, 7, 9, 9 };
		ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
		Assertions.assertEquals(Arrays.asList(2, 3, 4), result);
	}

	@Test
	@Tag("valid")
	public void testActivitySelectionWithOverlappingActivities() {
		int[] startTimes = new int[] { 1, 3, 0, 5, 8, 5 };
		int[] endTimes = new int[] { 4, 5, 6, 7, 10, 9 };
		ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
		Assertions.assertEquals(Arrays.asList(2, 3, 4), result);
	}

	@Test
	@Tag("invalid")
	public void testActivitySelectionWithEmptyArrays() {
		int[] startTimes = new int[] {};
		int[] endTimes = new int[] {};
		ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
		Assertions.assertEquals(new ArrayList<>(), result);
	}

	@Test
	@Tag("invalid")
	public void testActivitySelectionWithNullArrays() {
		Assertions.assertThrows(NullPointerException.class, () -> ActivitySelection.activitySelection(null, null));
	}

	@Test
	@Tag("invalid")
	public void testActivitySelectionWithDifferentLengthArrays() {
		int[] startTimes = new int[] { 1, 3, 0, 5, 8 };
		int[] endTimes = new int[] { 2, 4, 6, 7 };
		Assertions.assertThrows(IllegalArgumentException.class,
				() -> ActivitySelection.activitySelection(startTimes, endTimes));
	}

}