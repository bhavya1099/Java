// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=activitySelection_77631a6e2d
ROOST_METHOD_SIG_HASH=activitySelection_bf79d28a9f
"""
  Scenario 1: Test with valid start times and end times arrays
  Details:
    TestName: testActivitySelectionWithValidTimes
    Description: This test is meant to check the activitySelection method when provided with valid start times and end times. It verifies that the method correctly selects the activities that do not overlap and returns them in an ArrayList.
  Execution:
    Arrange: Create two arrays, one for start times and one for end times, which represent the start and end times of different activities.
    Act: Invoke the activitySelection method with the created start times and end times arrays.
    Assert: Use JUnit assertions to compare the actual returned ArrayList against the expected ArrayList of non-overlapping activities.
  Validation:
    This assertion verifies that the activitySelection method correctly selects the activities that do not overlap. It's significant in ensuring that the method properly implements the activity selection algorithm.
  Scenario 2: Test with empty start times and end times arrays
  Details:
    TestName: testActivitySelectionWithEmptyTimes
    Description: This test is meant to check the activitySelection method when provided with empty start times and end times arrays. It verifies that the method correctly returns an empty ArrayList in such a case.
  Execution:
    Arrange: Create two empty arrays for start times and end times.
    Act: Invoke the activitySelection method with the created empty arrays.
    Assert: Use JUnit assertions to compare the actual returned ArrayList against an empty ArrayList.
  Validation:
    This assertion verifies that the activitySelection method correctly handles the case when no activities are provided. It's significant in ensuring that the method properly handles edge cases.
  Scenario 3: Test with start times and end times arrays of different lengths
  Details:
    TestName: testActivitySelectionWithDifferentLengths
    Description: This test is meant to check the activitySelection method when provided with start times and end times arrays of different lengths. It verifies that the method throws an appropriate exception in such a case.
  Execution:
    Arrange: Create two arrays for start times and end times of different lengths.
    Act: Invoke the activitySelection method with the created arrays.
    Assert: Use JUnit assertions to expect an exception.
  Validation:
    This assertion verifies that the activitySelection method correctly throws an exception when provided with start times and end times arrays of different lengths. It's significant in ensuring that the method properly handles error cases.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.sorts")
@Tag("com.thealgorithms.sorts.sort")
@Tag("com.thealgorithms.maths")
@Tag("com.thealgorithms.maths.add")
@Tag("com.thealgorithms.maths.add")
@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.activitySelection")
@Tag("tag1")
@Tag("tag2")
public class ActivitySelectionTest {

	@Test
	public void testActivitySelectionWithValidTimes() {
		int[] startTimes = { 1, 3, 0, 5, 8, 5 };
		int[] endTimes = { 2, 4, 6, 7, 9, 9 };
		ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 1, 3, 4));
		ArrayList<Integer> actual = ActivitySelection.activitySelection(startTimes, endTimes);
		Assertions.assertEquals(expected, actual);
	}

	@Test
	public void testActivitySelectionWithEmptyTimes() {
		int[] startTimes = {};
		int[] endTimes = {};
		ArrayList<Integer> expected = new ArrayList<>();
		ArrayList<Integer> actual = ActivitySelection.activitySelection(startTimes, endTimes);
		Assertions.assertEquals(expected, actual);
	}

	@Test
	public void testActivitySelectionWithDifferentLengths() {
		int[] startTimes = { 1, 2, 3 };
		int[] endTimes = { 2, 3 };
		Assertions.assertThrows(IllegalArgumentException.class,
				() -> ActivitySelection.activitySelection(startTimes, endTimes));
	}

}