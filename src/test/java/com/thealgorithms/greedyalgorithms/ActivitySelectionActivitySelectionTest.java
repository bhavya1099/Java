
// ********RoostGPT********
/*
Test generated by RoostGPT for test integration-scenarioTab-test using AI Type  and AI Model

ROOST_METHOD_HASH=activitySelection_77631a6e2d
ROOST_METHOD_SIG_HASH=activitySelection_bf79d28a9f

```
Scenario 1: Normal Case with Non-Overlapping Activities

Details:
  TestName: selectNonOverlappingActivities
  Description: Tests the method with a series of activities that do not overlap, ensuring that all activities are selected.
Execution:
  Arrange: Define startTimes and endTimes arrays where no activities overlap.
  Act: Invoke the activitySelection method with these arrays.
  Assert: Assert that the returned list of selected activity indices matches the indices of all input activities.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result. This test validates that the method correctly identifies and selects all activities when none overlap, which is a basic requirement for the activity selection problem.
  Elaborate on the significance of the test in the context of application behavior or business logic. Ensuring that non-overlapping activities are all selected is crucial for maximizing the number of activities that can be attended.

Scenario 2: Normal Case with Overlapping Activities

Details:
  TestName: selectMaxNonOverlappingFromOverlappingSet
  Description: Tests the method with a set of overlapping activities to ensure only the maximum number of non-overlapping activities is selected.
Execution:
  Arrange: Define startTimes and endTimes arrays where some activities overlap.
  Act: Invoke the activitySelection method with these arrays.
  Assert: Assert that the returned list of selected activity indices is correct based on the logical maximum selection of non-overlapping activities.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result. This test validates that the method can correctly identify the maximum set of non-overlapping activities, which is essential for solving the activity selection problem efficiently.
  Elaborate on the significance of the test in the context of application behavior or business logic. The ability to select the maximum number of compatible activities from a set with overlaps is fundamental for applications like scheduling and resource allocation.

Scenario 3: Edge Case with Empty Input Arrays

Details:
  TestName: selectActivitiesFromEmptyArrays
  Description: Tests the method's behavior when provided with empty start and end times arrays to ensure it handles empty inputs gracefully.
Execution:
  Arrange: Define empty startTimes and endTimes arrays.
  Act: Invoke the activitySelection method with these empty arrays.
  Assert: Assert that the returned list is empty.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result. This test checks that the method returns an empty list when no activities are available, indicating robustness in handling edge cases.
  Elaborate on the significance of the test in the context of application behavior or business logic. Proper handling of edge cases like empty input ensures that the application is reliable and can gracefully handle unexpected or minimal input scenarios.

Scenario 4: Error Handling with Mismatched Array Lengths

Details:
  TestName: handleMismatchedInputLengths
  Description: Tests the method's response to startTimes and endTimes arrays of different lengths to ensure it throws an appropriate exception or handles the error.
Execution:
  Arrange: Define startTimes array and an endTimes array with different lengths.
  Act: Try to invoke the activitySelection method with these arrays and catch any exceptions or errors.
  Assert: Assert that the appropriate exception is thrown or an error is handled.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result. This test checks that the method can handle or report errors caused by input inconsistencies such as mismatched array lengths.
  Elaborate on the significance of the test in the context of application behavior or business logic. Ensuring that the method can handle input errors prevents runtime exceptions that could crash or destabilize the application.
```
*/

// ********RoostGPT********

package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.DisplayName;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import java.util.ArrayList;
import org.junit.jupiter.api.*;
import java.util.Arrays;
import java.util.Comparator;

public class ActivitySelectionActivitySelectionTest {

	@Test
	@DisplayName("Select Non-Overlapping Activities")
	@Tag("valid")
	public void selectNonOverlappingActivities() {
		int[] startTimes = { 1, 3, 5, 7 };
		int[] endTimes = { 2, 4, 6, 8 };
		ArrayList<Integer> expected = new ArrayList<>();
		expected.add(0);
		expected.add(1);
		expected.add(2);
		expected.add(3);
		ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
		assertThat(result).isEqualTo(expected);
	}

	@Test
	@DisplayName("Select Maximum Non-Overlapping Activities from Overlapping Set")
	@Tag("valid")
	public void selectMaxNonOverlappingFromOverlappingSet() {
		int[] startTimes = { 1, 3, 0, 5, 8, 5 };
		int[] endTimes = { 2, 4, 6, 7, 9, 9 };
		ArrayList<Integer> expected = new ArrayList<>();
		expected.add(2);
		expected.add(1);
		expected.add(3);
		expected.add(4);
		ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
		assertThat(result).isEqualTo(expected);
	}

	@Test
	@DisplayName("Select Activities From Empty Arrays")
	@Tag("boundary")
	public void selectActivitiesFromEmptyArrays() {
		int[] startTimes = {};
		int[] endTimes = {};
		ArrayList<Integer> expected = new ArrayList<>();
		ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
		assertThat(result).isEmpty();
	}

	@Test
	@DisplayName("Handle Mismatched Input Lengths")
	@Tag("invalid")
	public void handleMismatchedInputLengths() {
		int[] startTimes = { 1, 2 };
		int[] endTimes = { 3 }; // Mismatched length
		assertThatThrownBy(() -> ActivitySelection.activitySelection(startTimes, endTimes))
			.isInstanceOf(ArrayIndexOutOfBoundsException.class);
	}

}