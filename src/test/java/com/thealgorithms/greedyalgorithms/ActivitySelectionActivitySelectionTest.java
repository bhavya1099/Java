// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=activitySelection_77631a6e2d
ROOST_METHOD_SIG_HASH=activitySelection_bf79d28a9f
"""
Scenario 1: Test when one activity ends exactly as the next one starts
Details:
  TestName: testSequentialActivities
  Description: This scenario validates that the method works correctly when scheduling sequential activities which end exactly before another one starts.
Execution:
  Arrange: Prepare start and end arrays where one activity ends exactly before another starts.
  Act: Call the activitySelection method with the prepared parameters.
  Assert: Verify that the result includes all activities, as none of them overlap.
Validation: The assertion checks that all activities are selected because they don't overlap, It verifies whether scheduling is optimized in the context of sequential activities.
Scenario 2: Test overlapping activities
Details:
  TestName: testOverlappingActivities
  Description: This scenario validates behavior when all activities overlap with each other.
Execution:
  Arrange: Prepare start and end arrays where all activities start before the previous one ends.
  Act: Call the activitySelection method with the prepared parameters.
  Assert: Verify that the result only includes the first activity, since all other activities overlap.
Validation: The assertion checks that only the first activity is selected because all others overlap. It verifies the method's handling of overlaps, prioritizing non-overlap activities.
Scenario 3: Empty Input
Details:
  TestName: testEmptyArrays
  Description: This scenario validates the method's behavior when no activities are provided.
Execution:
  Arrange: Prepare empty start and end arrays.
  Act: Call the activitySelection method with the prepared parameters.
  Assert: Verify that the result is an empty array, as there were no activities to select.
Validation: The assertion checks for an empty result because no activities were provided to the method.
Scenario 4: Test with all activities having the same start and end times
Details:
  TestName: testSameStartAndEndTimesForAll
  Description: This scenario validates the scenario where all activities have the same start and end times.
Execution:
  Arrange: Prepare start and end arrays where all activities have the same times.
  Act: Call the activitySelection method with the prepared parameters.
  Assert: Verify that the result only includes the first activity, as all activities overlap each other.
Validation: This assertion validates that the function handles overlaps as expected and only selects one activity in case of total overlap.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Comparator;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.sorts")
@Tag("com.thealgorithms.sorts.sort")
@Tag("com.thealgorithms.misc")
@Tag("com.thealgorithms.misc.add")
@Tag("com.thealgorithms.misc.add")
@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.activitySelection")
@Tag("roostTest1")
@Tag("roostTest2")
public class ActivitySelectionActivitySelectionTest {

	@Test
	public void testSequentialActivities() {
		int[] startTimes = { 1, 2, 3, 4, 5 };
		int[] endTimes = { 2, 3, 4, 5, 6 };
		ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 1, 2, 3, 4));
		assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	@Test
	public void testOverlappingActivities() {
		int[] startTimes = { 1, 1, 1, 1, 1 };
		int[] endTimes = { 5, 5, 5, 5, 5 };
		ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0));
		assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	@Test
	public void testEmptyArrays() {
		int[] startTimes = {};
		int[] endTimes = {};
		ArrayList<Integer> expected = new ArrayList<>();
		assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	@Test
	public void testSameStartAndEndTimesForAll() {
		int[] startTimes = { 2, 2, 2, 2, 2 };
		int[] endTimes = { 2, 2, 2, 2, 2 };
		ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0));
		assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	}

}