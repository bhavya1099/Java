// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=activitySelection_77631a6e2d
ROOST_METHOD_SIG_HASH=activitySelection_bf79d28a9f
"""
  Scenario 1: Test Scenario for Valid Activity Selection
  Details:
    TestName: testValidActivitySelection
    Description: This test verifies that the activitySelection method can correctly select and sort activities based on the end time. Given two arrays of start times and end times, we expect the function to return a list of selected activities that do not overlap.
  Execution:
    Arrange: Define two arrays with valid start times and end times.
    Act: Call the activitySelection method providing the set up arrays.
    Assert: Check that the returned array of selected activities does not contain activities that overlap.
  Validation:
    The selected activities should not overlap in times and should be sorted in ascending order. This is essential to ensure that maximum activities can be selected without scheduling conflicts.
  Scenario 2: Test Scenario for Empty Start Times and End Times
  Details:
    TestName: testEmptyStartAndEndTimes
    Description: This test checks the behaviour of the activitySelection method when provided with empty start times and end times. In this scenario, the expected return from the method should be an empty list.
  Execution:
    Arrange: Define two arrays with empty start times and end times.
    Act: Call the activitySelection method providing both arrays.
    Assert: Assert that the returned list of activities is empty.
  Validation:
    When the input activity arrays are empty, the method should return an empty list. This checks the correct behaviour of the method for edge case scenario when no activities are provided.
  Scenario 3: Test Scenario for Single Activity
  Details:
    TestName: testSingleActivitySelection
    Description: This test checks the behaviour of the activitySelection method when provided with a single activity's start time and end time. For this scenario, the only valid selection should be the single activity present.
  Execution:
    Arrange: Define two arrays with a start time and an end time for single activity.
    Act: Call the activitySelection method providing both arrays.
    Assert: Check that the returned list of activities contains only the single activity provided.
  Validation:
    If only one activity is given, the method should return that activity as the selected activity. This verifies that the method can handle minimum input scenarios.

  Scenario 4: Test Scenario for Overlapping Activities
  Details:
    TestName: testOverlappingActivitySelection
    Description: This test verifies that the activitySelection method correctly prioritizes and selects activities that end earlier when there are overlapping activities.
  Execution:
    Arrange: Define two arrays with start times and end times where some activities overlap.
    Act: Call the activitySelection method providing the set up arrays.
    Assert: Check that the returned list of selected activities is as expected based on the nearest end time rule.
  Validation:
    The method should correctly select activities that end earlier when there are overlapping activities. This verifies that the priority is given to the activity that ends sooner, and assures that the selection algorithm is implemented correctly.
  Scenario 5:  Test Scenario for invalid Input
  Details:
    TestName: testInvalidInput
    Description: This test verifies the behavior of the activitySelection method when provided with arrays of different sizes. In such scenarios, an appropriate exception should be thrown.
  Execution:
    Arrange: Define two arrays, where one array will have more/less elements than the other.
    Act: Call the activitySelection method providing the set up arrays.
    Assert: Check that the appropriate exception is thrown.
  Validation:
    The function should throw an exception for inconsistent input. This tests the method's robustness against incorrect or inconsistent data.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Comparator;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.sorts")
@Tag("com.thealgorithms.sorts.sort")
@Tag("com.thealgorithms.misc")
@Tag("com.thealgorithms.misc.add")
@Tag("com.thealgorithms.misc.add")
@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.activitySelection")
@Tag("roostTest1")
@Tag("roostTest2")
public class ActivitySelectionActivitySelectionTest {

	@Test
	public void testValidActivitySelection() {
		int[] startTimes = { 1, 3, 0, 5, 8, 5 };
		int[] endTimes = { 2, 4, 6, 7, 9, 9 };
		ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 1, 3, 4));
		assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	@Test
	public void testEmptyStartAndEndTimes() {
		int[] startTimes = new int[0];
		int[] endTimes = new int[0];
		ArrayList<Integer> expected = new ArrayList<>();
		assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	@Test
	public void testSingleActivitySelection() {
		int[] startTimes = { 1 };
		int[] endTimes = { 2 };
		ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0));
		assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	@Test
	public void testOverlappingActivitySelection() {
		int[] startTimes = { 5, 1, 3, 0, 5, 8 };
		int[] endTimes = { 9, 2, 6, 4, 7, 9 };
		ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(1, 3, 4, 5));
		assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	@Test
	public void testInvalidInput() {
		int[] startTimes = { 5, 1, 3, 0, 5 };
		int[] endTimes = { 9, 2, 6, 4 };
		assertThrows(IllegalArgumentException.class, () -> {
			ActivitySelection.activitySelection(startTimes, endTimes);
		});
	}

}