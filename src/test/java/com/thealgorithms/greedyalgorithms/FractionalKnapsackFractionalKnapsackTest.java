// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=fractionalKnapsack_0c67eb8939
ROOST_METHOD_SIG_HASH=fractionalKnapsack_feda426d78
"""
  Scenario 1: Test with valid weights, values, and capacity
  Details:
    TestName: testFractionalKnapsackWithValidInputs.
    Description: This test is meant to check the functionality of the fractionalKnapsack method with valid weights, values, and capacity.
  Execution:
    Arrange: Set up an array of weights, an array of values, and a capacity value.
    Act: Invoke the fractionalKnapsack method with the weights, values, and capacity parameters.
    Assert: Use JUnit assertions to compare the actual result against the expected outcome.
  Validation:
    The assertion verifies that the fractionalKnapsack method correctly calculates the maximum value that can be obtained with the given weights, values, and capacity. The expected result is based on the correct implementation of the fractional knapsack problem.
  Scenario 2: Test with zero capacity
  Details:
    TestName: testFractionalKnapsackWithZeroCapacity.
    Description: This test is meant to check the functionality of the fractionalKnapsack method when the capacity is zero.
  Execution:
    Arrange: Set up an array of weights, an array of values, and a capacity value of zero.
    Act: Invoke the fractionalKnapsack method with the weights, values, and zero capacity.
    Assert: Use JUnit assertions to confirm that the return value is zero.
  Validation:
    The assertion verifies that the fractionalKnapsack method correctly handles the scenario where the capacity is zero. When the capacity is zero, no items can be added to the knapsack, thus the maximum value is zero.
  Scenario 3: Test with empty weights and values arrays
  Details:
    TestName: testFractionalKnapsackWithEmptyArrays.
    Description: This test is meant to check the functionality of the fractionalKnapsack method when the weights and values arrays are empty.
  Execution:
    Arrange: Set up empty weights and values arrays, and a capacity value.
    Act: Invoke the fractionalKnapsack method with the empty weights and values arrays, and the capacity.
    Assert: Use JUnit assertions to confirm that the return value is zero.
  Validation:
    The assertion verifies that the fractionalKnapsack method correctly handles the scenario where the weights and values arrays are empty. When the arrays are empty, no items can be added to the knapsack, thus the maximum value is zero.
  Scenario 4: Test with negative weights or values
  Details:
    TestName: testFractionalKnapsackWithNegativeInputs.
    Description: This test is meant to check the functionality of the fractionalKnapsack method when the weights or values contain negative numbers.
  Execution:
    Arrange: Set up an array of weights, an array of values with at least one negative number, and a capacity value.
    Act: Invoke the fractionalKnapsack method with the weights, values, and capacity parameters.
    Assert: Use JUnit assertions to confirm that the method throws an IllegalArgumentException.
  Validation:
    The assertion verifies that the fractionalKnapsack method correctly handles the scenario where the weights or values contain negative numbers. The method is expected to throw an IllegalArgumentException in this case because weights and values should be non-negative.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.Arrays;
import java.util.Comparator;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.fractionalKnapsack")
@Tag("roostTestTag1")
@Tag("roostTestTag2")
public class FractionalKnapsackTest {

	@Test
	public void testFractionalKnapsackWithValidInputs() {
		int[] weights = { 10, 20, 30 };
		int[] values = { 60, 100, 120 };
		int capacity = 50;
		int expectedValue = 240;
		int actualValue = FractionalKnapsack.fractionalKnapsack(weights, values, capacity);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	public void testFractionalKnapsackWithZeroCapacity() {
		int[] weights = { 10, 20, 30 };
		int[] values = { 60, 100, 120 };
		int capacity = 0;
		int actualValue = FractionalKnapsack.fractionalKnapsack(weights, values, capacity);
		assertEquals(0, actualValue);
	}

	@Test
	public void testFractionalKnapsackWithEmptyArrays() {
		int[] weights = {};
		int[] values = {};
		int capacity = 50;
		int actualValue = FractionalKnapsack.fractionalKnapsack(weights, values, capacity);
		assertEquals(0, actualValue);
	}

	@Test
	public void testFractionalKnapsackWithNegativeInputs() {
		int[] weights = { 10, 20, -30 };
		int[] values = { 60, 100, 120 };
		int capacity = 50;
		assertThrows(IllegalArgumentException.class,
				() -> FractionalKnapsack.fractionalKnapsack(weights, values, capacity));
	}

}