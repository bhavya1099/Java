
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model

ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c

**Scenario 1: Valid Job Creation**

Details:
TestName: createValidJob
Description: This test verifies the successful instantiation of a Job object using the `of` method, ensuring valid inputs result in correct object properties.

Execution:
Arrange: Prepare test data with valid inputs: a job name, processing time, and deadline.
Act: Call the `of` method with the prepared inputs.
Assert: Validate that the returned Job object is not null and check if fields match the provided inputs using the `toString` method.

Validation:
The assertion checks whether the Job object is created with the exact properties passed to the method, confirming correctness in handling normal input. Ensuring that properties are accurately set during object construction is foundational for further processing in application logic.

---

**Scenario 2: Job Creation with Empty Job Name**

Details:
TestName: createJobWithEmptyName
Description: Test the behavior when an empty string is used as the job name in the `of` method.

Execution:
Arrange: Define an empty job name, and valid processing time and deadline.
Act: Call the `of` method with the empty job name.
Assert: Validate that the Job object is successfully created, and its jobName attribute is an empty string.

Validation:
Ensuring that the method can handle empty job names confirms robust input handling, which might represent a valid case where job names are optional or generated later in the process.

---

**Scenario 3: Job Creation with Negative Processing Time**

Details:
TestName: createJobWithNegativeProcessingTime
Description: Verify the behavior of the `of` method when given a negative processing time.

Execution:
Arrange: Provide a valid job name and deadline, with a negative value for processing time.
Act: Call the `of` method and attempt to create a Job.
Assert: Check if the object still gets created and how the negative processing time influences the outcome.

Validation:
This test ascertains how the system handles improper values like negative numbers, which are logically incorrect for processing times. The focus is on whether the program fails safely or handles the value gracefully.

---

**Scenario 4: Job Creation with Negative Deadline**

Details:
TestName: createJobWithNegativeDeadline
Description: Assess the outcome when a negative deadline is used while creating a Job object via the `of` method.

Execution:
Arrange: Set up a valid job name and processing time, but with a negative deadline.
Act: Instantiate a Job using these parameters.
Assert: Verify whether the Job is created and consider the effects of a negative deadline.

Validation:
This is crucial to understanding boundary conditions and ensuring the application handles or rejects such values appropriately, which in real-world applications might represent cases to be managed differently such as error logging or special rules.

---

**Scenario 5: Job Creation with Extreme Large Values**

Details:
TestName: createJobWithExtremeValues
Description: Examine how the `of` method handles extremely large integer values for processing time and deadline.

Execution:
Arrange: Choose a typical job name, and set extremely high values for processing time and deadline.
Act: Use these parameters to create a Job object.
Assert: Confirm the object creation and validate integrity of assigned values.

Validation:
Testing with extreme values assesses the robustness of the system in handling unusually large inputs, which could reveal potential overflow issues or other defects in handling high-range data values.
*/

// ********RoostGPT********

package com.thealgorithms.greedyalgorithms;

import java.util.Arrays;
import com.thealgorithms.greedyalgorithms.MinimizingLateness.Job;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

class JobOfTest {

	@Test
	@Tag("valid")
	public void createValidJob() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 10;
		Job job = Job.of(jobName, processingTime, deadline);
		assertNotNull(job);
		assertEquals("Job1, startTime: 0, endTime: 5, lateness: 0", job.toString());
	}

	@Test
	@Tag("invalid")
	public void createJobWithEmptyName() {
		String jobName = "";
		int processingTime = 3;
		int deadline = 7;
		Job job = Job.of(jobName, processingTime, deadline);
		assertNotNull(job);
		assertEquals(", startTime: 0, endTime: 3, lateness: 0", job.toString());
	}

	@Test
	@Tag("invalid")
	public void createJobWithNegativeProcessingTime() {
		String jobName = "Job2";
		int processingTime = -1;
		int deadline = 8;
		Job job = Job.of(jobName, processingTime, deadline);
		assertNotNull(job);
		assertEquals("Job2, startTime: 0, endTime: -1, lateness: 0", job.toString());
	}

	@Test
	@Tag("boundary")
	public void createJobWithNegativeDeadline() {
		String jobName = "Job3";
		int processingTime = 10;
		int deadline = -5;
		Job job = Job.of(jobName, processingTime, deadline);
		assertNotNull(job);
		assertEquals("Job3, startTime: 0, endTime: 10, lateness: 0", job.toString());
	}

	@Test
	@Tag("boundary")
	public void createJobWithExtremeValues() {
		String jobName = "Job4";
		int processingTime = Integer.MAX_VALUE;
		int deadline = Integer.MAX_VALUE;
		Job job = Job.of(jobName, processingTime, deadline);
		assertNotNull(job);
		assertEquals("Job4, startTime: 0, endTime: " + Integer.MAX_VALUE + ", lateness: 0", job.toString());
	}

}