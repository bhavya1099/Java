// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=Job_81410279e1
ROOST_METHOD_SIG_HASH=Job_76176317b1
"""
  Scenario 1: Test with Valid Inputs

  Details:
    TestName: jobCreationWithValidInputs.
    Description: This test is meant to check if the Job object is created properly given valid inputs for jobName, processingTime and deadline.
  Execution:
    Arrange: Create a jobName, processingTime and deadline with valid values.
    Act: Invoke the Job constructor with the created values.
    Assert: Use JUnit assertions to check if the created Job object has the expected jobName, processingTime and deadline.
  Validation:
    This assertion aims to verify that the Job constructor creates a Job object with the correct values. The expected result is based on the input we provide to the constructor. This test is significant as it ensures that the Job object is being properly initialized.
  Scenario 2: Test with Null jobName

  Details:
    TestName: jobCreationWithNullJobName.
    Description: This test is meant to check if the Job constructor throws an exception when the jobName is null.
  Execution:
    Arrange: Create a jobName as null and processingTime and deadline with valid values.
    Act: Invoke the Job constructor with the created values.
    Assert: Use JUnit assertions to check if the constructor throws a NullPointerException.
  Validation:
    This assertion aims to verify that the Job constructor throws a NullPointerException when the jobName is null. This is expected as jobName is a mandatory field and cannot be null. This test is significant as it checks the error handling capabilities of the Job constructor.
  Scenario 3: Test with Negative Processing Time

  Details:
    TestName: jobCreationWithNegativeProcessingTime.
    Description: This test is meant to check if the Job constructor throws an exception when the processingTime is negative.
  Execution:
    Arrange: Create a jobName with a valid value and processingTime as a negative value and deadline with a valid value.
    Act: Invoke the Job constructor with the created values.
    Assert: Use JUnit assertions to check if the constructor throws an IllegalArgumentException.
  Validation:
    This assertion aims to verify that the Job constructor throws an IllegalArgumentException when the processingTime is negative. This is expected as processingTime cannot be a negative value. This test is significant as it checks the error handling capabilities of the Job constructor.
  Scenario 4: Test with Zero Deadline

  Details:
    TestName: jobCreationWithZeroDeadline.
    Description: This test is meant to check if the Job constructor throws an exception when the deadline is zero.
  Execution:
    Arrange: Create a jobName and processingTime with valid values and deadline as zero.
    Act: Invoke the Job constructor with the created values.
    Assert: Use JUnit assertions to check if the constructor throws an IllegalArgumentException.
  Validation:
    This assertion aims to verify that the Job constructor throws an IllegalArgumentException when the deadline is zero. This is expected as deadline cannot be zero. This test is significant as it checks the error handling capabilities of the Job constructor.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.Job")
@Tag("roostTestTag1")
@Tag("roostTestTag2")
public class MinimizingLatenessJobTest {

	@Test
	public void jobCreationWithValidInputs() {
		// Arrange
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 10;
		// Act
		Job job = new Job(jobName, processingTime, deadline);
		// Assert
		assertEquals(jobName, job.getJobName());
		assertEquals(processingTime, job.getProcessingTime());
		assertEquals(deadline, job.getDeadline());
	}

	@Test
	public void jobCreationWithNullJobName() {
		// Arrange
		String jobName = null;
		int processingTime = 5;
		int deadline = 10;
		// Assert
		assertThrows(NullPointerException.class, () -> {
			// Act
			new Job(jobName, processingTime, deadline);
		});
	}

	@Test
	public void jobCreationWithNegativeProcessingTime() {
		// Arrange
		String jobName = "Job1";
		int processingTime = -5;
		int deadline = 10;
		// Assert
		assertThrows(IllegalArgumentException.class, () -> {
			// Act
			new Job(jobName, processingTime, deadline);
		});
	}

	@Test
	public void jobCreationWithZeroDeadline() {
		// Arrange
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 0;
		// Assert
		assertThrows(IllegalArgumentException.class, () -> {
			// Act
			new Job(jobName, processingTime, deadline);
		});
	}

}