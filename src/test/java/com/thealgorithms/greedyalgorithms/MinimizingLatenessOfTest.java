// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
"""
Scenario 1: Test with Valid Inputs
Details:
  TestName: testWithValidInputs
  Description: This test checks the method "of" by passing valid input parameters.
Execution:
  Arrange: Declare and initialize 'jobName' with the non-null or empty valid string, 'processingTime' and 'deadline' with positive integers.
  Act: Invoke the "of" method with these parameters.
  Assert: Assert that the returned Job object is not null and the values of its attributes match the input parameters.
Validation:
  This test verifies that the 'of' method correctly creates a Job object when given valid inputs. The expected result is the creation of a Job object with all variables correctly set. This is important in the context of creating Job objects in a valid and expected way.
Scenario 2: Test Negative Integer Input for Processing Time and Deadline
Details:
  TestName: testNegativeIntegerInput
  Description: This test checks the behavior of the method "of" when negative integers are passed in as 'processingTime' and 'deadline'.
Execution:
  Arrange: Declare and initialize 'jobName' with a valid String, 'processingTime' and 'deadline' with negative integers.
  Act: Invoke the "of" method with these parameters.
  Assert: Check if the method throws IllegalArgumentException.
Validation:
  This test aims to verify that the method rejects negative values for the 'processingTime' and 'deadline', which would be invalid in the context of job scheduling.

Scenario 3: Test with Null Input for Job Name
Details:
  TestName: testWithNullJobName
  Description: This test checks the behavior of the method "of" when null is passed in for 'jobName'.
Execution:
  Arrange: Declare 'jobName' as null, 'processingTime' and 'deadline' with valid positive integers.
  Act: Invoke the "of" method with these parameters.
  Assert: Check if the method throws NullPointerException.
Validation:
  This test aims to verify that the method throws an exception when null is given for the 'jobName' parameter, enforcing the need for a non-null job name.

Scenario 4: Test with Empty String for Job Name
Details:
  TestName: testWithEmptyJobName
  Description: This test verifies the behaviour of the method "of" when an empty string is passed in for 'jobName'.
Execution:
  Arrange: Initialize 'jobName' with an empty string, 'processingTime' and 'deadline' with valid values.
  Act: Invoke the "of" method with these parameters.
  Assert: Assert whether the method throws IllegalArgumentException.
Validation:
  Validates that the 'of' method does not accept job with empty names. An exception should be thrown to enforce the requirement of a valid job name.

"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
@Tag("roostTest1")
@Tag("roostTest2")
public class MinimizingLatenessOfTest {

	@Test
	public void testWithValidInputs() {
		// Arrange
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 10;
		// Act
		Job result = Job.of(jobName, processingTime, deadline);
		// Assert
		assertNotNull(result);
		assertEquals(jobName, result.getJobName());
		assertEquals(processingTime, result.getProcessingTime());
		assertEquals(deadline, result.getDeadline());
	}

	@Test
	public void testNegativeIntegerInput() {
		// Arrange
		String jobName = "Job2";
		int processingTime = -5;
		int deadline = -10;
		// Act and Assert
		assertThrows(IllegalArgumentException.class, () -> Job.of(jobName, processingTime, deadline));
	}

	@Test
	public void testWithNullJobName() {
		// Arrange
		String jobName = null;
		int processingTime = 5;
		int deadline = 10;

		// Act and Assert
		assertThrows(NullPointerException.class, () -> Job.of(jobName, processingTime, deadline));
	}

	@Test
	public void testWithEmptyJobName() {
		// Arrange
		String jobName = "";
		int processingTime = 5;
		int deadline = 10;

		// Act and Assert
		assertThrows(IllegalArgumentException.class, () -> Job.of(jobName, processingTime, deadline));
	}

}