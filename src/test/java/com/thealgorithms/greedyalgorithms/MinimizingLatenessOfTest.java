
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model

ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c

Scenario 1: Valid input parameters

Details:
  TestName: createJobWithValidParameters
  Description: This test checks the functionality of the 'of' method when provided with valid parameters that represent realistic data a job might have, such as a non-empty job name, positive processing time, and a positive deadline.
Execution:
  Arrange: Define a string `jobName`, and integers `processingTime` and `deadline`.
  Act: Call the `Job.of(jobName, processingTime, deadline)` method with the arranged variables.
  Assert: Check if the returned Job object has the expected values assigned to its fields (jobName, processing time, and deadline).
Validation:
  Clarify why the assertion verifies the correct creation of the Job object using provided parameters.
  This scenario is important as it validates that the job creation process works as expected under normal circumstances, ensuring the application's core functionality behaves correctly.

Scenario 2: Negative processing time

Details:
  TestName: createJobWithNegativeProcessingTime
  Description: This test evaluates how the 'of' method handles a case where the processing time is negative, which is typically an invalid or unrealistic input in the context of job scheduling.
Execution:
  Arrange: Provide a valid job name and deadline, but a negative value for processing time.
  Act: Call the `Job.of` method with these parameters.
  Assert: Assert whether the method handles the negative input correctly, possibly by throwing an IllegalArgumentException or similar.
Validation:
  Clarify the importance of handling such cases, preventing invalid data from entering the system and potentially causing logic errors or unexpected behavior.
  This test is significant because it checks the application's robustness and error handling capabilities.

Scenario 3: Empty job name

Details:
  TestName: createJobWithEmptyJobName
  Description: Test the behavior of the 'of' method when an empty string is provided as the job name.
Execution:
  Arrange: Use an empty string for the job name and valid values for processing time and deadline.
  Act: Call the `Job.of` method with these parameters.
  Assert: Check how the method reacts, possibly by validating whether a default job name is used, or an error is thrown.
Validation:
  Explaining the handling of empty or null strings can be crucial for maintaining data integrity and ensuring meaningful job identifiers.
  This test is important to ensure that jobs cannot be created with potentially problematic identifiers, which could affect tracking or managing jobs.

Scenario 4: Extreme values for deadline

Details:
  TestName: createJobWithExtremeDeadlineValues
  Description: Evaluate the system's handling of extremely large or small integer values for the deadline, to test the limits and robustness.
Execution:
  Arrange: Provide a valid job name and processing time, along with Integer.MAX_VALUE or Integer.MIN_VALUE as a deadline.
  Act: Call the `Job.of` method with these parameters.
  Assert: Check that the job is either validly created with these extreme values or appropriately handles the situation with an error.
Validation:
  Observing how the system manages extreme values can offer insights into its capacity and resilience.
  This test assesses the system's ability to handle boundary conditions without failure.

Scenario 5: All parameters at boundary conditions

Details:
  TestName: createJobWithBoundaryConditions
  Description: Test the creation of a job when all parameters are at their boundary conditions (e.g., empty job name, zero processing time, zero deadline).
Execution:
  Arrange: Set job name to empty, processing time to zero, and deadline to zero.
  Act: Invoke `Job.of` with these parameters.
  Assert: Verify how the method reacts to all boundary conditions being tested simultaneously.
Validation:
  This test can reveal if the method has cumulative error handling for multiple boundary inputs and is important for ensuring robustness and appropriate reactions under unusual or extreme input scenarios.
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.catchThrowable;
import org.junit.jupiter.api.*;
import java.util.Arrays;

public class MinimizingLatenessOfTest {

	static class Job {

		String jobName;

		int processingTime;

		int deadline;

		public Job(String jobName, int processingTime, int deadline) {
			if (jobName == null || jobName.isEmpty())
				throw new IllegalArgumentException("job name cannot be empty");
			if (processingTime <= 0)
				throw new IllegalArgumentException("processing time must be positive");
			this.jobName = jobName;
			this.processingTime = processingTime;
			this.deadline = deadline;
		}

		public static Job of(String jobName, int processingTime, int deadline) {
			return new Job(jobName, processingTime, deadline);
		}

	}

	@Test
	@Tag("valid")
	public void createJobWithValidParameters() {
		String jobName = "PrintJob";
		int processingTime = 5;
		int deadline = 10;

		Job job = Job.of(jobName, processingTime, deadline);
		assertThat(job.jobName).isEqualTo(jobName);
		assertThat(job.processingTime).isEqualTo(processingTime);
		assertThat(job.deadline).isEqualTo(deadline);
	}

	@Test
	@Tag("invalid")
	public void createJobWithNegativeProcessingTime() {
		String jobName = "NetworkJob";
		int processingTime = -1;
		int deadline = 15;
		Throwable thrown = catchThrowable(() -> Job.of(jobName, processingTime, deadline));
		assertThat(thrown).isInstanceOf(IllegalArgumentException.class)
			.hasMessageContaining("processing time must be positive");
	}

	@Test
	@Tag("invalid")
	public void createJobWithEmptyJobName() {
		String jobName = "";
		int processingTime = 10;
		int deadline = 20;
		Throwable thrown = catchThrowable(() -> Job.of(jobName, processingTime, deadline));
		assertThat(thrown).isInstanceOf(IllegalArgumentException.class)
			.hasMessageContaining("job name cannot be empty");
	}

	@Test
	@Tag("boundary")
	public void createJobWithExtremeDeadlineValues() {
		String jobName = "StorageJob";
		int processingTime = 10;
		int deadline = Integer.MAX_VALUE;
		Job job = Job.of(jobName, processingTime, deadline);
		assertThat(job.jobName).isEqualTo(jobName);
		assertThat(job.processingTime).isEqualTo(processingTime);
		assertThat(job.deadline).isEqualTo(deadline);
	}

	@Test
	@Tag("boundary")
	public void createJobWithBoundaryConditions() {
		String jobName = "";
		int processingTime = 0;
		int deadline = 0;
		Throwable thrown = catchThrowable(() -> Job.of(jobName, processingTime, deadline));
		assertThat(thrown).isInstanceOf(IllegalArgumentException.class).hasMessageContaining("invalid inputs");
	}

}