// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
"""
Scenario 1: Valid job creation
TestName: validJobCreation
Description: This test is meant to check if a job can be created with valid input parameters.
Execution:
  Arrange: Instantiate jobName as "Job1", processingTime as 5, and deadline as 10.
  Act: Invoke the of method with the instantiated parameters.
  Assert: Assert that the returned job object is not null and the fields match the input parameters.
Validation:
  This assertion aims to verify that the job creation method works as expected. If the job object is created successfully, it means that the method can handle valid inputs.
Scenario 2: Job creation with null jobName
TestName: jobCreationWithNullJobName
Description: This test is meant to check how the method handles null input for the jobName parameter.
Execution:
  Arrange: Instantiate jobName as null, processingTime as 5, and deadline as 10.
  Act: Invoke the of method with the instantiated parameters.
  Assert: Assert that an appropriate exception is thrown.
Validation:
  This assertion aims to verify that the method can handle null inputs and throw appropriate exceptions. This is significant as it prevents the creation of job objects with null names.
Scenario 3: Job creation with negative processingTime
TestName: jobCreationWithNegativeProcessingTime
Description: This test is meant to check how the method handles negative input for the processingTime parameter.
Execution:
  Arrange: Instantiate jobName as "Job1", processingTime as -5, and deadline as 10.
  Act: Invoke the of method with the instantiated parameters.
  Assert: Assert that an appropriate exception is thrown.
Validation:
  This assertion aims to verify that the method can handle negative inputs for processing time and throw appropriate exceptions. This is significant as it prevents the creation of job objects with negative processing times.
Scenario 4: Job creation with processingTime greater than deadline
TestName: jobCreationWithProcessingTimeGreaterThanDeadline
Description: This test is meant to check how the method handles situations where processingTime is greater than the deadline.
Execution:
  Arrange: Instantiate jobName as "Job1", processingTime as 15, and deadline as 10.
  Act: Invoke the of method with the instantiated parameters.
  Assert: Assert that an appropriate exception is thrown.
Validation:
  This assertion aims to verify that the method can handle situations where the processing time is greater than the deadline and throw appropriate exceptions. This is significant as it maintains the integrity of the job scheduling logic.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
@Tag("roostTestTag1")
@Tag("roostTestTag2")
public class MinimizingLatenessOfTest {

	@Test
	@Tag("valid")
	public void validJobCreation() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 10;
		Job job = Job.of(jobName, processingTime, deadline);
		assertAll("Valid Job Creation", () -> assertNotNull(job, "Job object should not be null"),
				() -> assertEquals(jobName, job.getJobName(), "Job name does not match"),
				() -> assertEquals(processingTime, job.getProcessingTime(), "Processing Time does not match"),
				() -> assertEquals(deadline, job.getDeadline(), "Deadline does not match"));
	}

	@Test
	@Tag("invalid")
	public void jobCreationWithNullJobName() {
		String jobName = null;
		int processingTime = 5;
		int deadline = 10;
		assertThrows(NullPointerException.class, () -> Job.of(jobName, processingTime, deadline));
	}

	@Test
	@Tag("invalid")
	public void jobCreationWithNegativeProcessingTime() {
		String jobName = "Job1";
		int processingTime = -5;
		int deadline = 10;
		assertThrows(IllegalArgumentException.class, () -> Job.of(jobName, processingTime, deadline));
	}

	@Test
	@Tag("invalid")
	public void jobCreationWithProcessingTimeGreaterThanDeadline() {
		String jobName = "Job1";
		int processingTime = 15;
		int deadline = 10;
		assertThrows(IllegalArgumentException.class, () -> Job.of(jobName, processingTime, deadline));
	}

}