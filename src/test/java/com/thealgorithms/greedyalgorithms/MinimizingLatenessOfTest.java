// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
"""
Scenario 1: Valid job creation
TestName: validJobCreation
Description: This test is meant to check if a job can be created with valid input parameters.
Execution:
  Arrange: Instantiate jobName as "Job1", processingTime as 5, and deadline as 10.
  Act: Invoke the of method with the instantiated parameters.
  Assert: Use JUnit assertions to check if the returned Job object is not null and has the correct properties.
Validation:
  The assertion verifies that a valid job can be successfully created. The expected result is a Job object with the correct properties. This test is significant to ensure that the application can correctly instantiate and initialize a Job object.
Scenario 2: Job creation with negative processing time
TestName: jobCreationWithNegativeProcessingTime
Description: This test is meant to check if a job can be created with a negative processing time.
Execution:
  Arrange: Instantiate jobName as "Job2", processingTime as -5, and deadline as 10.
  Act: Invoke the of method with the instantiated parameters.
  Assert: Use JUnit assertions to check if an exception is thrown.
Validation:
  The assertion verifies that an exception is thrown when the processing time is negative. This test is important to ensure that the application correctly handles invalid input parameters.
Scenario 3: Job creation with negative deadline
TestName: jobCreationWithNegativeDeadline
Description: This test is meant to check if a job can be created with a negative deadline.
Execution:
  Arrange: Instantiate jobName as "Job3", processingTime as 5, and deadline as -10.
  Act: Invoke the of method with the instantiated parameters.
  Assert: Use JUnit assertions to check if an exception is thrown.
Validation:
  The assertion verifies that an exception is thrown when the deadline is negative. This test is important to ensure that the application correctly handles invalid input parameters.
Scenario 4: Job creation with null job name
TestName: jobCreationWithNullJobName
Description: This test is meant to check if a job can be created with a null job name.
Execution:
  Arrange: Instantiate jobName as null, processingTime as 5, and deadline as 10.
  Act: Invoke the of method with the instantiated parameters.
  Assert: Use JUnit assertions to check if an exception is thrown.
Validation:
  The assertion verifies that an exception is thrown when the job name is null. This test is important to ensure that the application correctly handles null input parameters.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
@Tag("roostTestTag1")
@Tag("roostTestTag2")
public class MinimizingLatenessOfTest {

	@Test
	@Tag("valid")
	public void validJobCreation() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 10;
		Job result = Job.of(jobName, processingTime, deadline);
		assertNotNull(result, "The job should not be null");
		assertEquals(jobName, result.getJobName(), "Job name should be the same as the input");
		assertEquals(processingTime, result.getProcessingTime(), "Processing time should be the same as the input");
		assertEquals(deadline, result.getDeadline(), "Deadline should be the same as the input");
	}

	@Test
	@Tag("invalid")
	public void jobCreationWithNegativeProcessingTime() {
		String jobName = "Job2";
		int processingTime = -5;
		int deadline = 10;
		assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		}, "Should throw an IllegalArgumentException when processing time is negative");
	}

	@Test
	@Tag("invalid")
	public void jobCreationWithNegativeDeadline() {
		String jobName = "Job3";
		int processingTime = 5;
		int deadline = -10;
		assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		}, "Should throw an IllegalArgumentException when deadline is negative");
	}

	@Test
	@Tag("invalid")
	public void jobCreationWithNullJobName() {
		String jobName = null;
		int processingTime = 5;
		int deadline = 10;
		assertThrows(NullPointerException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		}, "Should throw a NullPointerException when job name is null");
	}

}