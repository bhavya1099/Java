// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
"""
Scenario 1: Test to validate correct object is returned with given parameters
TestName: testValidJobObjectCreation
Description: In this scenario, the test aims to check if the method correctly creates and returns a Job object with the supplied parameters for jobName, processingTime, and deadline.
Execution:
  Arrange: Given a jobName as 'Job1', processingTime as 5 and deadline as 10.
  Act: Invoke the method 'of' with the parameters supplied.
  Assert: The returned Job object should have the same parameters as input.
Validation:
  It validates that the method is properly creating Job object with the correct parameters. This test is important to ensure that job details are correctly encapsulated in the Job object.
Scenario 2: Test to validate Job object creation with null jobName
TestName: testJobCreationWithNullName
Description: This test is intended to check the behavior of the 'of' method when null is passed as jobName.
Execution:
  Arrange: Given a null jobName, processingTime as 5, and deadline as 10.
  Act: Invoke the method 'of' with the parameters supplied.
  Assert: An exception should be thrown mentioning invalid jobName.
Validation:
  This test validates the method's error handling when receiving null for the jobName parameter. This is critical to ensure that the method validates its inputs correctly and maintains data integrity.
Scenario 3: Test to validate Job creation with negative processing time
TestName: testJobCreationWithNegativeProcessingTime
Description: This test is intended to check the behavior of 'of' method when a negative value for processingTime is passed.
Execution:
  Arrange: Given a jobName as 'Job1', negative processingTime as -5, and deadline as 10.
  Act: Invoke the method 'of' with the parameters supplied.
  Assert: An exception should be thrown mentioning invalid processing time.
Validation:
  This verifies the method's ability to handle invalid values for processing time. This is significant in the context of maintaining the consistency of job data.
Scenario 4: Test to validate Job creation with negative deadline
TestName: testJobCreationWithNegativeDeadline
Description: This test is meant to check the behavior of 'of' method when a negative value for deadline is passed.
Execution:
  Arrange: Given a jobName as 'Job1', processingTime as 5, and a negative deadline as -10.
  Act: Invoke the method 'of' with the parameters supplied.
  Assert: An exception should be thrown mentioning invalid deadline.
Validation:
  It validates that the method correctly handles negative values for deadline. This is necessary to maintain the validity of job data.
Scenario 5: Test to validate Job creation with processing time greater than the deadline
TestName: testJobCreationWithProcessingTimeGreaterThanDeadline
Description: This test is aimed to check the behavior of 'of' method under a scenario where processing time is greater than deadline.
Execution:
  Arrange: Given a jobName as 'Job1', processingTime as 15, and deadline as 10.
  Act: Invoke the method 'of' with the parameters supplied.
  Assert: An exception should be thrown mentioning invalid deadline or processing time.
Validation:
  This test validates that the method properly handles scenarios of invalid combinations of processing time and deadline. This is critical in the context of job scheduling and planning.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
@Tag("roostTest1")
@Tag("roostTest2")
public class MinimizingLatenessTest {

	@Test
	public void testValidJobObjectCreation() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 10;
		Job job = Job.of(jobName, processingTime, deadline);

		Assertions.assertEquals(jobName, job.getName());
		Assertions.assertEquals(processingTime, job.getProcessingTime());
		Assertions.assertEquals(deadline, job.getDeadline());
	}

	@Test
	public void testJobCreationWithNullName() {
		String jobName = null;
		int processingTime = 5;
		int deadline = 10;

		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		});
	}

	@Test
	public void testJobCreationWithNegativeProcessingTime() {
		String jobName = "Job1";
		int processingTime = -5;
		int deadline = 10;

		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		});
	}

	@Test
	public void testJobCreationWithNegativeDeadline() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = -10;

		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		});
	}

	@Test
	public void testJobCreationWithProcessingTimeGreaterThanDeadline() {
		String jobName = "Job1";
		int processingTime = 15;
		int deadline = 10;

		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		});
	}

}