// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
Scenario 1: Construct Job with valid parameters
Details:
  TestName: jobConstructionWithValidParameters.
  Description: This test scenario is created to validate the successful instantiation of the Job object when all parameters are valid.
Execution:
  Arrange: Provide valid values for `Job.of` method parameters.
  Act: Invoke `Job.of(jobName, processingTime, deadline)` with valid parameters.
  Assert: Check if the created object is not null and its fields have the expected values. Use relevant getter methods from the `Job` class to verify values. They should match the input we provided during Job creation.
Validation:
  We're expecting the Job object to be created without any errors or exceptions. Expected field values of the Job object to match input data confirm that the Job construction works correctly. This is relevant to ensure that Jobs are created as expected and hold correct information.
Scenario 2: Construct Job with empty jobName
Details:
  TestName: jobConstructionWithEmptyJobName.
  Description: This scenario tests the correctness of Job creation when an empty jobName is provided.
Execution:
  Arrange: Set `jobName` as an empty string. Provide valid integer values for `processingTime` and `deadline`.
  Act: Invoke `Job.of(jobName, processingTime, deadline)` using these parameters.
  Assert: Check if the created object is not null, jobName is an empty string, and other fields of the Job have the expected values.
Validation:
  We assume that it's allowed to create Job with an empty jobName. The successful Job creation and the match of the other Job field values with the provided parameters validate the construction function used with an empty jobName. It's relevant for cases where a jobName might not be directly available or required.
Scenario 3: Construct Job with negative processingTime
Details:
  TestName: jobConstructionWithNegativeProcessingTime.
  Description: This scenario tests the Job object construction when negative processingTime is provided.
Execution:
  Arrange: Provide a valid `jobName` string, a negative `processingTime` value, and a valid `deadline` integer.
  Act: Invoke `Job.of(jobName, processingTime, deadline)` using these parameters.
  Assert: If a negative processingTime is not acceptable, an exception should be thrown.  Otherwise, verify if a Job object was constructed properly and its fields match the input parameters.
Validation:
  This scenario validates the behavior of `Job.of` function when a negative processingTime is provided. If negative values are not allowed, an exception should signify that the method correctly handles invalid inputs. If negative values are allowed, the successful creation of a Job object shows the method's ability to correctly process this input.
Scenario 4: Construct Job with zero deadline
Details:
  TestName: jobConstructionWithZeroDeadline.
  Description: This scenario tests the Job object construction when the deadline is zero.
Execution:
  Arrange: Provide a valid `jobName` string, a valid `processingTime` integer, and `deadline` as zero.
  Act: Invoke `Job.of(jobName, processingTime, deadline)` using these parameters.
  Assert: If a zero deadline is not valid, an exception should be thrown. Otherwise, check the created object if it's not null and its fields have the expected values.
Validation:
  The validation depends on whether deadline can be zero. If zero is not an acceptable deadline value, throwing an exception is the correct behavior. If it's acceptable, then a Job object should be created successfully, and the values should match what was provided. This ensures that the Job object handles deadline correctly.
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
@Tag("roostTest1")
@Tag("roostTest2")
public class MinimizingLatenessTest {

	@Test
	public void jobConstructionWithValidParameters() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 10;
		Job job = Job.of(jobName, processingTime, deadline);
		assertNotNull(job, "Job object should not be null");
		assertEquals(jobName, job.getJobName(), "Job name should match the input parameter");
		assertEquals(processingTime, job.getProcessingTime(), "Processing time should match the input parameter");
		assertEquals(deadline, job.getDeadline(), "Deadline should match the input parameter");
	}

	@Test
	public void jobConstructionWithEmptyJobName() {
		String jobName = "";
		int processingTime = 5;
		int deadline = 10;
		Job job = Job.of(jobName, processingTime, deadline);
		assertNotNull(job, "Job object should not be null");
		assertEquals(jobName, job.getJobName(), "Job name should be an empty string");
		assertEquals(processingTime, job.getProcessingTime(), "Processing time should match the input parameter");
		assertEquals(deadline, job.getDeadline(), "Deadline should match the input parameter");
	}

	@Test
	public void jobConstructionWithNegativeProcessingTime() {
		String jobName = "Job1";
		int processingTime = -5;
		int deadline = 10;
		assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		}, "Must throw an exception as processing time is negative");
	}

	@Test
	public void jobConstructionWithZeroDeadline() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 0;
		assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		}, "Must throw an Exception as deadline is zero");
	}

}