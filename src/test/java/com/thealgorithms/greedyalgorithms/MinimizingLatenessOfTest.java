// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
"""
  Scenario 1: Valid job creation
  Details:
    TestName: testValidJobCreation
    Description: This test is designed to validate whether the 'of' method can successfully create a Job object when supplied with valid parameters.
  Execution:
    Arrange: Provide a valid job name, processing time, and deadline.
    Act: Invoke the 'of' method with the arranged parameters.
    Assert: Check if the returned Job object is not null and if the jobName, processingTime, and deadline match the provided values.
  Validation:
    This test ensures that a Job object can be created successfully with valid inputs. The expected result is based on the assumption that the 'of' method should return a Job object with the same values as the input parameters.
  Scenario 2: Job creation with empty job name
  Details:
    TestName: testJobCreationWithEmptyJobName
    Description: This test checks the behavior of the 'of' method when an empty string is passed as the job name.
  Execution:
    Arrange: Provide an empty string as the job name, and valid processing time and deadline.
    Act: Invoke the 'of' method with the arranged parameters.
    Assert: Check if an exception is thrown or if the returned Job object contains an empty job name.
  Validation:
    This test verifies the system's ability to handle invalid input (empty job name). The expected outcome depends on how the 'of' method is designed to handle such cases.
  Scenario 3: Job creation with negative processing time
  Details:
    TestName: testJobCreationWithNegativeProcessingTime
    Description: This test checks how the 'of' method behaves when a negative value is supplied for the processing time.
  Execution:
    Arrange: Provide a valid job name, a negative value for processing time, and a valid deadline.
    Act: Invoke the 'of' method with the arranged parameters.
    Assert: Check if an exception is thrown or if the returned Job object contains a negative processing time.
  Validation:
    This test aims to verify the system's handling of invalid input (negative processing time). The expected result depends on how the 'of' method is programmed to handle such scenarios.
  Scenario 4: Job creation with deadline less than processing time
  Details:
    TestName: testJobCreationWithDeadlineLessThanProcessingTime
    Description: This test is designed to check the behavior of the 'of' method when the deadline is less than the processing time.
  Execution:
    Arrange: Provide a valid job name, a processing time, and a deadline that is less than the processing time.
    Act: Invoke the 'of' method with the arranged parameters.
    Assert: Check if an exception is thrown or if the returned Job object contains a deadline less than the processing time.
  Validation:
    This test is meant to check the system's response to a logically incorrect input (deadline less than processing time). The expected outcome is based on how the 'of' method is designed to handle such cases.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
@Tag("tag1")
@Tag("tag2")
public class MinimizingLatenessOfTest {

	@Test
	void testValidJobCreation() {
		// Arrange
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 10;

		// Act
		Job job = Job.of(jobName, processingTime, deadline);
		// Assert
		assertNotNull(job);
		assertEquals(jobName, job.getJobName());
		assertEquals(processingTime, job.getProcessingTime());
		assertEquals(deadline, job.getDeadline());
	}

	@Test
	void testJobCreationWithEmptyJobName() {
		// Arrange
		String jobName = "";
		int processingTime = 5;
		int deadline = 10;
		// Assert
		assertThrows(IllegalArgumentException.class, () -> {
			// Act
			Job job = Job.of(jobName, processingTime, deadline);
		});
	}

	@Test
	void testJobCreationWithNegativeProcessingTime() {
		// Arrange
		String jobName = "Job1";
		int processingTime = -5;
		int deadline = 10;
		// Assert
		assertThrows(IllegalArgumentException.class, () -> {
			// Act
			Job job = Job.of(jobName, processingTime, deadline);
		});
	}

	@Test
	void testJobCreationWithDeadlineLessThanProcessingTime() {
		// Arrange
		String jobName = "Job1";
		int processingTime = 10;
		int deadline = 5;
		// Assert
		assertThrows(IllegalArgumentException.class, () -> {
			// Act
			Job job = Job.of(jobName, processingTime, deadline);
		});
	}

}