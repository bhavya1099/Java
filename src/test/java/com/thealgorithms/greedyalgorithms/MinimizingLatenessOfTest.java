
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model

ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c

Scenario 1: Valid input parameters

Details:
  TestName: createJobWithValidParameters
  Description: This test checks the functionality of the 'of' method when provided with valid parameters that represent a typical job creation scenario.
Execution:
  Arrange: Define valid inputs, a String for jobName, and integers for processingTime and deadline.
  Act: Invoke the Job.of method using the defined parameters.
  Assert: Validate that the resulting Job object is not null and accurately reflects the supplied parameters.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result: The assertion verifies that the method returns a non-null Job object that correctly represents the job's properties based on the inputs. This confirms the method's proper handling and instantiation of Job objects.
  Elaborate on the significance of the test: Ensures the basic functional integrity of the Job creation process through the 'of' method, demonstrating that the method correctly interprets and utilizes input parameters to construct a well-defined Job entity.

Scenario 2: Null job name

Details:
  TestName: createJobWithNullName
  Description: The test evaluates the 'of' method's behavior when the jobName parameter is null, which might be an unsupported or problematic scenario.
Execution:
  Arrange: Set jobName to null and define standard, non-null values for processingTime and deadline.
  Act: Attempt to invoke the Job.of method with the null jobName and check for exceptions or specific result states.
  Assert: Check if the function call throws an IllegalArgumentException or handles the null input gracefully.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result: Assesses how the module behaves with incomplete or invalid input, specifically focusing on robustness and error handling when encountering null values for mandatory fields.
  Elaborate on the significance of the test: This test is crucial for understanding how error handling is managed in job creation processes, potentially safeguarding against data integrity issues within the application.

Scenario 3: Negative processing time

Details:
  TestName: createJobWithNegativeProcessingTime
  Description: This test case assesses if the Job.of method can handle or reject negative values for processingTime, which logically should not exist.
Execution:
  Arrange: Define a valid jobName and deadline, but use a negative integer for processingTime.
  Act: Invoke the Job.of method with these parameters.
  Assert: Expect an IllegalArgumentException or an appropriate handling mechanism that treats this as an invalid input.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result: The assertion checks the method's ability to validate and respond to obviously incorrect numerical inputs, fostering reliability and robustness.
  Elaborate on the significance of the test: Critical for ensuring the application's resilience and logical operation, as processing times should not be negative. Helps to prevent computational and logical errors downstream.

Scenario 4: Extreme values for deadline

Details:
  TestName: createJobWithExtremeDeadlineValues
  Description: Verifies the method's response to extreme or boundary values of deadline to see if the method can handle unusually large integers without error.
Execution:
  Arrange: Specify a valid jobName and processingTime, but use an extremely high (or maximum integer value) for deadline.
  Act: Invoke the Job.of method with these parameters.
  Assert: Confirm that the method does not fail and returns a valid Job object.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result: This test targets the method's capability to manage high-range integer values, ensuring that it can handle all possible valid int inputs without failure.
  Elaborate on the significance of the test: It is essential to ensure that the application can process jobs with long-term deadlines, aiding in its applicability to a broader range of real-world scenarios.

These scenarios cover a range of normal and edge cases, effectively probing both typical use and potential error conditions within the Job creation functionality.
*/

// ********RoostGPT********

package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import org.junit.jupiter.api.*;
import java.util.Arrays;

public class MinimizingLatenessOfTest {

	@Test
	@Tag("valid")
	public void createJobWithValidParameters() {
		// Arrange
		String jobName = "SampleJob";
		int processingTime = 120;
		int deadline = 300;
		// Act
		Job result = Job.of(jobName, processingTime, deadline);
		// Assert
		assertThat(result).isNotNull();
		assertThat(result.jobName).isEqualTo(jobName);
		assertThat(result.processingTime).isEqualTo(processingTime);
		assertThat(result.deadline).isEqualTo(deadline);
	}

	@Test
	@Tag("invalid")
	public void createJobWithNullName() {
		// Arrange
		String jobName = null;
		int processingTime = 100;
		int deadline = 200;
		// Act & Assert
		assertThatThrownBy(() -> Job.of(jobName, processingTime, deadline)).isInstanceOf(IllegalArgumentException.class)
			.hasMessageContaining("jobName cannot be null");
	}

	@Test
	@Tag("invalid")
	public void createJobWithNegativeProcessingTime() {
		// Arrange
		String jobName = "SampleJob";
		int processingTime = -10; // Invalid processing time
		int deadline = 200;
		// Act & Assert
		assertThatThrownBy(() -> Job.of(jobName, processingTime, deadline)).isInstanceOf(IllegalArgumentException.class)
			.hasMessageContaining("processingTime cannot be negative");
	}

	@Test
	@Tag("boundary")
	public void createJobWithExtremeDeadlineValues() {
		// Arrange
		String jobName = "LongTermJob";
		int processingTime = 50;
		int deadline = Integer.MAX_VALUE;
		// Act
		Job result = Job.of(jobName, processingTime, deadline);
		// Assert
		assertThat(result).isNotNull();
		assertThat(result.deadline).isEqualTo(Integer.MAX_VALUE);
	}

}