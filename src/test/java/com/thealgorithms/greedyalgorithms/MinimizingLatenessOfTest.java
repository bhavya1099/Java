// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
Scenario 1: Verify successful creation of Job object with valid inputs

Details:
  TestName: jobObjectCreationWithValidInputs
  Description: The test verifies that the "of" function creates a Job object successfully when jobName, processingTime and deadline inputs are valid.
Execution:
  Arrange: Declare valid values for jobName, processingTime and deadline.
  Act: Invoke the "of" function with the declared variables.
  Assert: Verify that a valid Job object is returned and its properties match the inputs.
Validation:
  The test validates that the method correctly creates a job object when provided valid inputs. This is important to ensure that jobs have been defined correctly in the application logic.
Scenario 2: Verify handling of null jobName input for Job object creation
Details:
  TestName: jobObjectCreationWithNullJobName
  Description: The test verifies that the "of" function throws an appropriate error when the jobName input is null.
Execution:
  Arrange: Declare null value for jobName and valid values for processingTime and deadline.
  Act: Invoke the "of" function with the declared variables.
  Assert: Verify that an IllegalArgumentException gets thrown.
Validation:
  The test validates that the method correctly detects and prevents creation of a job object when jobName is null. This confirms the application’s ability to guard against invalid inputs.
Scenario 3: Verify that Job object creation handles negative values for processingTime
Details:
  TestName: jobObjectCreationWithNegativeProcessingTime
  Description: The test verifies that the "of" function throws an appropriate error when the processingTime input is negative.
Execution:
  Arrange: Declare a negative value for processingTime and valid values for jobName and deadline.
  Act: Invoke the "of" function with the declared variables.
  Assert: Verify that an IllegalArgumentException gets thrown.
Validation:
  The test validates that the method prohibits the creation of a job object when processingTime is negative. This ensures that jobs have valid processing times according to the business rules.
Scenario 4: Verify handling of negative deadline value during Job object creation
Details:
  TestName: jobObjectCreationWithNegativeDeadline
  Description: The test verifies that the "of" function throws an appropriate error when the deadline input is negative.
Execution:
  Arrange: Declare negative value for deadline, and valid values for jobName and processingTime.
  Act: Invoke the "of" function with the declared variables.
  Assert: Verify that an IllegalArgumentException gets thrown.
Validation:
  The test validates that the method correctly detects and prevents creation of a job object when the deadline is negative. This confirms the application’s ability to bring about customer satisfaction by only allowing jobs with valid deadlines.
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
@Tag("roostTest1")
@Tag("roostTest2")
public class MinimizingLatenessOfTest {

	@Test
	public void jobObjectCreationWithValidInputs() {
		String jobName = "Test Job";
		int processingTime = 10;
		int deadline = 20;
		Job job = Job.of(jobName, processingTime, deadline);
		assertNotNull(job, "Job object should not be null");
		assertEquals(jobName, job.getJobName(), "Job name does not match input value");
		assertEquals(processingTime, job.getProcessingTime(), "Processing time does not match input value");
		assertEquals(deadline, job.getDeadline(), "Deadline does not match input value");
	}

	@Test
	public void jobObjectCreationWithNullJobName() {
		String jobName = null;
		int processingTime = 10;
		int deadline = 20;
		assertThrows(IllegalArgumentException.class, () -> Job.of(jobName, processingTime, deadline),
				"IllegalArgumentException should be thrown for null jobName input");
	}

	@Test
	public void jobObjectCreationWithNegativeProcessingTime() {
		String jobName = "Test Job";
		int processingTime = -1;
		int deadline = 20;
		assertThrows(IllegalArgumentException.class, () -> Job.of(jobName, processingTime, deadline),
				"IllegalArgumentException should be thrown for negative processingTime input");
	}

	@Test
	public void jobObjectCreationWithNegativeDeadline() {
		String jobName = "Test Job";
		int processingTime = 10;
		int deadline = -1;
		assertThrows(IllegalArgumentException.class, () -> Job.of(jobName, processingTime, deadline),
				"IllegalArgumentException should be thrown for negative deadline input");
	}

}