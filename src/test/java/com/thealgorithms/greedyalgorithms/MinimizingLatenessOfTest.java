// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
"""
Scenario 1: Test when Job object is created with valid parameters.
Details:
  TestName: testJobCreationWithValidParameters.
  Description: This test is meant to check if the Job object is created successfully with valid parameters.
Execution:
  Arrange: Create valid parameters for jobName, processingTime, and deadline.
  Act: Invoke the method of with the parameters created.
  Assert: Use JUnit assertions to compare the actual Job object properties with the expected jobName, processingTime, and deadline.
Validation:
  This assertion verifies that the Job object is created as expected when valid parameters are provided. This is significant in the context of application behavior as it ensures that jobs are correctly created with the provided details.
Scenario 2: Test when Job object is created with null jobName.
Details:
  TestName: testJobCreationWithNullJobName.
  Description: This test is meant to check if an exception is thrown when the Job object is created with null jobName.
Execution:
  Arrange: Create null jobName, and valid processingTime, and deadline.
  Act: Invoke the method of with the parameters created.
  Assert: Use JUnit assertions to expect an exception.
Validation:
  This assertion verifies that an exception is thrown when the jobName is null. This is significant in the context of application behavior as it ensures that jobs cannot be created without a name.
Scenario 3: Test when Job object is created with negative processingTime.
Details:
  TestName: testJobCreationWithNegativeProcessingTime.
  Description: This test is meant to check if an exception is thrown when the Job object is created with negative processingTime.
Execution:
  Arrange: Create valid jobName, negative processingTime, and valid deadline.
  Act: Invoke the method of with the parameters created.
  Assert: Use JUnit assertions to expect an exception.
Validation:
  This assertion verifies that an exception is thrown when the processingTime is negative. This is significant in the context of application behavior as it ensures that jobs cannot be created with a negative processing time.
Scenario 4: Test when Job object is created with negative deadline.
Details:
  TestName: testJobCreationWithNegativeDeadline.
  Description: This test is meant to check if an exception is thrown when the Job object is created with negative deadline.
Execution:
  Arrange: Create valid jobName, valid processingTime, and negative deadline.
  Act: Invoke the method of with the parameters created.
  Assert: Use JUnit assertions to expect an exception.
Validation:
  This assertion verifies that an exception is thrown when the deadline is negative. This is significant in the context of application behavior as it ensures that jobs cannot be created with a negative deadline.
Scenario 5: Test when Job object is created with processingTime greater than deadline.
Details:
  TestName: testJobCreationWithProcessingTimeGreaterThanDeadline.
  Description: This test is meant to check if the Job object is created successfully when the processingTime is greater than the deadline.
Execution:
  Arrange: Create valid jobName, processingTime greater than deadline.
  Act: Invoke the method of with the parameters created.
  Assert: Use JUnit assertions to compare the actual Job object properties with the expected jobName, processingTime, and deadline.
Validation:
  This assertion verifies that the Job object is created as expected even when processingTime is greater than the deadline. This is significant in the context of application behavior as it checks the flexibility of job creation.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
@Tag("roostTestTag1")
@Tag("roostTestTag2")
public class MinimizingLatenessOfTest {

	@Test
	public void testJobCreationWithValidParameters() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 10;
		Job job = Job.of(jobName, processingTime, deadline);
		Assertions.assertEquals(jobName, job.getJobName());
		Assertions.assertEquals(processingTime, job.getProcessingTime());
		Assertions.assertEquals(deadline, job.getDeadline());
	}

	@Test
	public void testJobCreationWithNullJobName() {
		String jobName = null;
		int processingTime = 5;
		int deadline = 10;
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			Job job = Job.of(jobName, processingTime, deadline);
		});
	}

	@Test
	public void testJobCreationWithNegativeProcessingTime() {
		String jobName = "Job1";
		int processingTime = -5;
		int deadline = 10;
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			Job job = Job.of(jobName, processingTime, deadline);
		});
	}

	@Test
	public void testJobCreationWithNegativeDeadline() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = -10;
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			Job job = Job.of(jobName, processingTime, deadline);
		});
	}

	@Test
	public void testJobCreationWithProcessingTimeGreaterThanDeadline() {
		String jobName = "Job1";
		int processingTime = 15;
		int deadline = 10;
		Job job = Job.of(jobName, processingTime, deadline);
		Assertions.assertEquals(jobName, job.getJobName());
		Assertions.assertEquals(processingTime, job.getProcessingTime());
		Assertions.assertEquals(deadline, job.getDeadline());
	}

}