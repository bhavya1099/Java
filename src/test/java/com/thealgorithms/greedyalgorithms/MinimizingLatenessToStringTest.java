// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model
ROOST_METHOD_HASH=toString_7033209074
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2
### Scenario 1: Basic toString Test
**Details:**
  TestName: basicToStringTest
  Description: This test checks the correctness of the `toString` method for a typical `Job` object with non-negative values for `startTime`, `processingTime`, and `lateness`.
**Execution:**
  Arrange: Create a `Job` object using the `Job.of` method with specified `jobName`, `processingTime`, and `deadline`. Manually set `startTime` and `lateness` for the created job.
  Act: Call the `toString` method on the `Job` object.
  Assert: Compare the output of the `toString` method to the expected formatted string.
**Validation:**
  The assertion verifies that the `toString` method correctly formats the string with the job name, start time, end time (calculated as `startTime + processingTime`), and lateness. The test is significant as it ensures that the method provides accurate and readable output crucial for debugging and logging.
---
### Scenario 2: Negative Times Test
**Details:**
  TestName: negativeTimesToStringTest
  Description: Tests the `toString` method's behavior when `startTime` and `lateness` are negative, which might occur in erroneous scenarios or special cases in scheduling algorithms.
**Execution:**
  Arrange: Create a `Job` object with a negative `startTime` and `lateness`.
  Act: Invoke the `toString` method on this `Job` object.
  Assert: Verify that the output string correctly includes negative values for `startTime` and `lateness`.
**Validation:**
  The assertion checks if the `toString` method can handle and display negative timings accurately. This test is crucial for identifying and troubleshooting errors in job scheduling where time calculations might go below zero due to bugs or misconfigurations.
---
### Scenario 3: Zero Values Test
**Details:**
  TestName: zeroValuesToStringTest
  Description: Verifies that the `toString` method correctly formats the output when `startTime`, `processingTime`, and `lateness` are zero, representing edge cases for job scheduling.
**Execution:**
  Arrange: Create a `Job` object with all time-related parameters set to zero.
  Act: Call the `toString` method on this job.
  Assert: Ensure the output string reflects the zero values accurately.
**Validation:**
  This test confirms that the `toString` method can accurately represent jobs that have not yet started or processed and have no lateness. This scenario is important for correctly logging and debugging newly created or placeholder jobs.
---
### Scenario 4: Maximum Integer Values Test
**Details:**
  TestName: maxIntValuesToStringTest
  Description: Tests how the `toString` method handles the maximum integer values for `startTime`, `processingTime`, and `lateness`, which helps in understanding the behavior under extreme conditions.
**Execution:**
  Arrange: Create a `Job` object with `Integer.MAX_VALUE` for `startTime`, `processingTime`, and `lateness`.
  Act: Invoke the `toString` method on this job.
  Assert: Check if the method can format such large numbers without errors.
**Validation:**
  The assertion examines the method's ability to handle and display extremely large values, which is essential for ensuring robustness in high-value computations or scenarios where time values might unintentionally overflow. This test is significant for stress testing the application against extreme data values.
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.assertj.core.api.Assertions.assertThat;
import org.junit.jupiter.api.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.toString")
class MinimizingLatenessToStringTest {

	@Test
	@Tag("valid")
	public void basicToStringTest() {
		Job job = new Job("Job1", 5, 10);
		job.startTime = 2;
		job.lateness = 1;
		String expected = "Job1, startTime: 2, endTime: 7, lateness: 1";
		assertThat(job.toString()).isEqualTo(expected);
	}

	@Test
	@Tag("invalid")
	public void negativeTimesToStringTest() {
		Job job = new Job("Job2", 3, 8);
		job.startTime = -2;
		job.lateness = -1;
		String expected = "Job2, startTime: -2, endTime: 1, lateness: -1";
		assertThat(job.toString()).isEqualTo(expected);
	}

	@Test
	@Tag("boundary")
	public void zeroValuesToStringTest() {
		Job job = new Job("Job3", 0, 0);
		job.startTime = 0;
		job.lateness = 0;
		String expected = "Job3, startTime: 0, endTime: 0, lateness: 0";
		assertThat(job.toString()).isEqualTo(expected);
	}

	@Test
	@Tag("boundary")
	public void maxIntValuesToStringTest() {
		Job job = new Job("Job4", Integer.MAX_VALUE, Integer.MAX_VALUE);
		job.startTime = Integer.MAX_VALUE;
		job.lateness = Integer.MAX_VALUE;
		// Handle potential integer overflow by casting to long for correct calculation
		long endTime = ((long) job.startTime) + ((long) job.processingTime);
		String expected = String.format("Job4, startTime: %d, endTime: %d, lateness: %d", Integer.MAX_VALUE, endTime,
				Integer.MAX_VALUE);
		assertThat(job.toString()).isEqualTo(expected);
	}

}